tosca_definitions_version: cloudify_dsl_1_3

imports:

  - http://www.getcloudify.org/spec/cloudify/3.4m5/types.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/1.4/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.3/plugin.yaml
  - types/bind9.yaml
  - types/healing-types.yaml

inputs:

  # Compute Inputs

  image_id:
    type: string

  flavor_id:
    type: string

  # General Inputs

  agent_user:
    type: string
    default: 'ubuntu'

  number_of_instances:
    default: 1

node_templates:

  healing_dog:
    type: healing_node_type
    relationships:
      - target: bind9_host
        type: connect_node_to_monitor

  dns_vm_ip:
    type: cloudify.openstack.nodes.FloatingIP


  dns_app_security_groups:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      security_group:
        description: Security group for DNS service with ssh
      rules:
        - port: 22
          remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
        - port: 53
          remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
        - port: 53
          remote_ip_prefix: 0.0.0.0/0
          protocol: udp


  bind9_host:
    type: bind9.nodes.MonitoredServer
    properties:
      cloudify_agent:
        user: { get_input: agent_user }
      server:
        image: { get_input: image_id }
        flavor: { get_input: flavor_id }

    relationships:
      - type: cloudify.openstack.server_connected_to_floating_ip
        target: dns_vm_ip
      - type: cloudify.openstack.server_connected_to_security_group
        target: dns_app_security_groups

  bind9:
    type: bind9.nodes.Bind9
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            dns_ip: { get_attribute: [ dns_vm_ip, floating_ip_address ] }
    relationships:
      - type: cloudify.relationships.contained_in
        target: bind9_host

groups:
  vm_and_ip:
    members: [bind9_host, bind9, dns_vm_ip]

policies:
  scale_policy:
    type: cloudify.policies.scaling
    properties:
      default_instances: { get_input: number_of_instances }
    targets: [vm_and_ip]

outputs:
  endpoint:
    description: Bind9 DNS server IP/Port
    value:
      dns_ip: { get_attribute: [ dns_vm_ip, floating_ip_address ] }
      dns_port: 53
